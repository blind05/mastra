// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`V4 tests > result.fullStream > should send files 1`] = `
[
  {
    "messageId": "msg-0",
    "request": {},
    "type": "step-start",
    "warnings": [],
  },
  DefaultGeneratedFileWithType {
    "base64Data": "Hello World",
    "mimeType": "text/plain",
    "type": "file",
    "uint8ArrayData": undefined,
  },
  {
    "textDelta": "Hello!",
    "type": "text-delta",
  },
  DefaultGeneratedFileWithType {
    "base64Data": "QkFVRw==",
    "mimeType": "image/jpeg",
    "type": "file",
    "uint8ArrayData": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "messageId": "msg-0",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "headers": undefined,
      "id": "id-1",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "logprobs": undefined,
    "providerMetadata": undefined,
    "response": {
      "headers": undefined,
      "id": "id-1",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
  },
]
`;

exports[`V4 tests > result.fullStream > should send reasoning deltas 1`] = `
[
  {
    "messageId": "msg-0",
    "request": {},
    "type": "step-start",
    "warnings": [],
  },
  {
    "textDelta": "I will open the conversation",
    "type": "reasoning",
  },
  {
    "textDelta": " with witty banter. ",
    "type": "reasoning",
  },
  {
    "signature": "1234567890",
    "type": "reasoning-signature",
  },
  {
    "data": "redacted-reasoning-data",
    "type": "redacted-reasoning",
  },
  {
    "textDelta": "Once the user has relaxed,",
    "type": "reasoning",
  },
  {
    "textDelta": " I will pry for valuable information.",
    "type": "reasoning",
  },
  {
    "signature": "1234567890",
    "type": "reasoning-signature",
  },
  {
    "textDelta": "Hi",
    "type": "text-delta",
  },
  {
    "textDelta": " there!",
    "type": "text-delta",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "messageId": "msg-0",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "headers": undefined,
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "logprobs": undefined,
    "providerMetadata": undefined,
    "response": {
      "headers": undefined,
      "id": "id-0",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
  },
]
`;

exports[`V4 tests > result.fullStream > should send sources 1`] = `
[
  {
    "messageId": "msg-0",
    "request": {},
    "type": "step-start",
    "warnings": [],
  },
  {
    "source": {
      "id": "123",
      "providerMetadata": {
        "provider": {
          "custom": "value",
        },
      },
      "sourceType": "url",
      "title": "Example",
      "url": "https://example.com",
    },
    "type": "source",
  },
  {
    "textDelta": "Hello!",
    "type": "text-delta",
  },
  {
    "source": {
      "id": "456",
      "providerMetadata": {
        "provider": {
          "custom": "value2",
        },
      },
      "sourceType": "url",
      "title": "Example 2",
      "url": "https://example.com/2",
    },
    "type": "source",
  },
  {
    "experimental_providerMetadata": {
      "testprovider": {
        "testkey": "testvalue",
      },
    },
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "messageId": "msg-0",
    "providerMetadata": {
      "testprovider": {
        "testkey": "testvalue",
      },
    },
    "request": {},
    "response": {
      "headers": undefined,
      "id": "id-1",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": {
      "testprovider": {
        "testkey": "testvalue",
      },
    },
    "finishReason": "stop",
    "logprobs": undefined,
    "providerMetadata": {
      "testprovider": {
        "testkey": "testvalue",
      },
    },
    "response": {
      "headers": undefined,
      "id": "id-1",
      "modelId": "mock-model-id",
      "timestamp": 1970-01-01T00:00:00.000Z,
    },
    "type": "finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
  },
]
`;

exports[`V4 tests > result.fullStream > should send text deltas 1`] = `
[
  {
    "messageId": "msg-0",
    "request": {},
    "type": "step-start",
    "warnings": [],
  },
  {
    "textDelta": "Hello",
    "type": "text-delta",
  },
  {
    "textDelta": ", ",
    "type": "text-delta",
  },
  {
    "textDelta": "world!",
    "type": "text-delta",
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "isContinued": false,
    "logprobs": undefined,
    "messageId": "msg-0",
    "providerMetadata": undefined,
    "request": {},
    "response": {
      "headers": undefined,
      "id": "response-id",
      "modelId": "response-model-id",
      "timestamp": 1970-01-01T00:00:05.000Z,
    },
    "type": "step-finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
    "warnings": undefined,
  },
  {
    "experimental_providerMetadata": undefined,
    "finishReason": "stop",
    "logprobs": undefined,
    "providerMetadata": undefined,
    "response": {
      "headers": undefined,
      "id": "response-id",
      "modelId": "response-model-id",
      "timestamp": 1970-01-01T00:00:05.000Z,
    },
    "type": "finish",
    "usage": {
      "completionTokens": 10,
      "promptTokens": 3,
      "totalTokens": 13,
    },
  },
]
`;

exports[`V4 tests > result.textStream > should filter out empty text deltas 1`] = `
[
  "Hello",
  ", ",
  "world!",
]
`;

exports[`V4 tests > result.textStream > should not include reasoning content in textStream 1`] = `
[
  "Hi",
  " there!",
]
`;

exports[`V4 tests > result.textStream > should swallow error to prevent server crash 1`] = `[]`;
